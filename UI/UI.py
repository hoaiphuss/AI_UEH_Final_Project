import tkinter as tk
from tkinter import ttk
from knapsack_algorithm import generate_knapsack_problem, knapsack_branch_and_bound_tracking, knapsack_backtracking_tracking
from draw import draw_tree
import time

def show_results():
    try:
        num_items = int(entry_num_items.get())
        if num_items <= 0:
            raise ValueError("S·ªë l∆∞·ª£ng v·∫≠t ph·∫©m ph·∫£i l·ªõn h∆°n 0.")

        values, weights, capacity = generate_knapsack_problem(num_items)
        result_text.set(
            f"üéØ Gi√° tr·ªã c√°c v·∫≠t ph·∫©m: {values}\n"
            f"‚öñÔ∏è Tr·ªçng l∆∞·ª£ng c√°c v·∫≠t ph·∫©m: {weights}\n"
            f"üß≥ Gi·ªõi h·∫°n tr·ªçng l∆∞·ª£ng t√∫i: {capacity}"
        )

        algo = algorithm_choice.get()
        fitness_tracker = []
        start_time = time.time()

        if algo == "Quay lui c∆° b·∫£n":
            result = knapsack_backtracking_tracking(weights, values, capacity, len(weights), fitness_tracker=fitness_tracker)
        elif algo == "Nh√°nh c·∫≠n":
            solution, max_value, _, fitness_log = knapsack_branch_and_bound_tracking(values, weights, capacity)
            result = {
                "solution": solution,
                "value": max_value,
                "weight": sum(w for i, w in enumerate(weights) if solution[i] == 1)
            }
            fitness_tracker = fitness_log

        elapsed_time = time.time() - start_time
        convergence_speed = sum(
            1 for i in range(1, len(fitness_tracker))
            if fitness_tracker[i] > fitness_tracker[i - 1]
        )

        result_label.config(text=str(result["solution"]))
        total_value_label.config(text=str(result["value"]))
        total_weight_label.config(text=str(result["weight"]))
        time_label.config(text=f"{elapsed_time:.4f}")
        convergence_label.config(text=str(convergence_speed))
        draw_tree(canvas, num_items, values, result["solution"])

        history_table.insert("", "end", values=(
            algo,
            num_items,
            str(result["solution"]),
            result["value"],
            result["weight"],
            f"{elapsed_time:.4f}",
            convergence_speed
        ))

    except ValueError as e:
        result_text.set(f"L·ªói: {e}")

# UI setup
root = tk.Tk()
root.title("üéí B√†i to√°n C√°i T√∫i - Tr√¨nh gi·∫£i tr·ª±c quan")
root.geometry("1000x750")
root.configure(bg="#f9f9f9")

# ========== FRAME NH·∫¨P LI·ªÜU & K·∫æT QU·∫¢ ========== #
frame_top = tk.Frame(root, bg="#ffffff", bd=2, relief="groove", padx=10, pady=10)
frame_top.pack(fill=tk.X, padx=15, pady=10)

# Khung tr√°i - Nh·∫≠p li·ªáu
frame_input = tk.Frame(frame_top, bg="#ffffff")
frame_input.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

tk.Label(frame_input, text="üî¢ S·ªë l∆∞·ª£ng v·∫≠t ph·∫©m", font=("Arial", 11), bg="#ffffff").pack(anchor="w", pady=4)
entry_num_items = ttk.Entry(frame_input, width=10)
entry_num_items.pack(anchor="w", pady=4)

tk.Label(frame_input, text="‚öôÔ∏è Thu·∫≠t to√°n", font=("Arial", 11), bg="#ffffff").pack(anchor="w", pady=4)
algorithm_choice = ttk.Combobox(frame_input, values=["Quay lui c∆° b·∫£n", "Nh√°nh c·∫≠n"])
algorithm_choice.current(0)
algorithm_choice.pack(anchor="w", pady=4)

btn_generate = tk.Button(frame_input, text="üöÄ Sinh & Gi·∫£i", font=("Arial", 11, "bold"), bg="#4CAF50", fg="white", padx=10, pady=5, command=show_results)
btn_generate.pack(anchor="w", pady=10)

# Khung ph·∫£i - Hi·ªÉn th·ªã k·∫øt qu·∫£
frame_result = tk.Frame(frame_top, bg="#f1f1f1", bd=1, relief="solid")
frame_result.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)

tk.Label(frame_result, text="üìä K·∫øt qu·∫£ b√†i to√°n", font=("Arial", 11, "bold"), bg="#f1f1f1", fg="black").pack(anchor="w", pady=4)
result_text = tk.StringVar()
tk.Label(frame_result, textvariable=result_text, bg="white", font=("Arial", 11), justify="left", wraplength=400).pack(fill=tk.BOTH, expand=True, pady=4, padx=5)

# ========== FRAME TH·ªêNG K√ä T√ìM T·∫ÆT ========== #
frame_summary = tk.Frame(root, bg="#ffffff", bd=2, relief="groove", padx=10, pady=10)
frame_summary.pack(fill=tk.X, padx=15)

def add_summary_label(title, variable_widget):
    tk.Label(frame_summary, text=title, font=("Arial", 10, "bold"), bg="#ffffff").pack(side=tk.LEFT, padx=10)
    variable_widget.pack(side=tk.LEFT)

result_label = tk.Label(frame_summary, text="0", bg="#ffffff", font=("Arial", 10))
time_label = tk.Label(frame_summary, text="0", bg="#ffffff", font=("Arial", 10))
convergence_label = tk.Label(frame_summary, text="0", bg="#ffffff", font=("Arial", 10))
total_value_label = tk.Label(frame_summary, text="0", bg="#ffffff", font=("Arial", 10))
total_weight_label = tk.Label(frame_summary, text="0", bg="#ffffff", font=("Arial", 10))

add_summary_label("üßÆ Gi·∫£i ph√°p:", result_label)
add_summary_label("‚è±Ô∏è Th·ªùi gian (s):", time_label)
add_summary_label("üìà H·ªôi t·ª•:", convergence_label)
add_summary_label("üí∞ T·ªïng gi√° tr·ªã:", total_value_label)
add_summary_label("‚öñÔ∏è T·ªïng c√¢n n·∫∑ng:", total_weight_label)

# ========== NOTEBOOK - C√ÇY & L·ªäCH S·ª¨ ========== #
notebook = ttk.Notebook(root)
notebook.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

# Tab C√¢y tr·∫°ng th√°i
tab_tree = tk.Frame(notebook, bg="white")
notebook.add(tab_tree, text="üå≤ C√¢y tr·∫°ng th√°i")
canvas = tk.Canvas(tab_tree, bg="white")
canvas.pack(fill=tk.BOTH, expand=True)

# Tab L·ªãch s·ª≠
tab_history = tk.Frame(notebook)
notebook.add(tab_history, text="üìú L·ªãch s·ª≠ th√≠ nghi·ªám")

columns = ("Thu·∫≠t to√°n", "S·ªë v·∫≠t ph·∫©m", "Gi·∫£i ph√°p", "Gi√° tr·ªã", "C√¢n n·∫∑ng", "Th·ªùi gian", "H·ªôi t·ª•")
history_table = ttk.Treeview(tab_history, columns=columns, show="headings")
for col in columns:
    history_table.heading(col, text=col)
    history_table.column(col, width=120, anchor="center")
history_table.pack(fill=tk.BOTH, expand=True)

root.mainloop()
